{"ast":null,"code":"\"use strict\";\n\n// import { Component } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { ApiService } from 'src/app/shared/api.service';\n// import { AuthserviceService } from 'src/app/shared/authservice.service';\n// @Component({\n//   selector: 'app-student-dashboard',\n//   templateUrl: './student-dashboard.component.html',\n//   styleUrls: ['./student-dashboard.component.css']\n// })\n// export class StudentDashboardComponent {\n//   studentData !: any;\n//   selectedStudent: any;\n//   studentDataFromJson: any;\n//   email!: string; //display emailid of vt to student dashboard\n//   showDailyDiarySection: boolean = false;\n//   MonthDaysData: string[]=['MonthDay1','MonthDay2','MonthDay3','MonthDay4','MonthDay5','MonthDay6','MonthDay7','MonthDay8','MonthDay9','MonthDay10','MonthDay11','MonthDay12','MonthDay13'];\n//   hoursData: string[] = ['hour1', 'hour2', 'hour3', 'hour4', 'hour5', 'hour6', 'hour7', 'hour8', 'hour9', 'hour10', 'hour11', 'hour12', 'hour13'];\n//   minutesData: string[] = ['minutes1','minutes2','minutes3','minutes4','minutes5','minutes6','minutes7','minutes8','minutes9','minutes10','minutes11','minutes12','minutes13'];\n//  // Task1TickData: string[] = ['Task1Tick1','Task1Tick2','Task1Tick3','Task1Tick4','Task1Tick5','Task1Tick6','Task1Tick7','Task1Tick8','Task1Tick9','Task1Tick10','Task1Tick11','Task1Tick12','Task1Tick13']\n//   taskData: any[] | undefined;\n//   constructor(private apiservice: ApiService,\n//     private router: Router,\n//     private authservice : AuthserviceService) { }\n//   ngOnInit(): void {\n//     this.getAllStudents();\n//     this.email = this.authservice.getEmail();//display emailid of vt to student dashboard\n//   }\n//   getAllStudents() {\n//     this.apiservice.getStudents().subscribe((res: any) => {\n//       this.studentData = res.studentDetails;\n//       console.log(res.studentDetails);\n//     })\n//   }\n//   selectStudent(id: number) {\n//     this.apiservice.getStudentById(id).subscribe((res) => {\n//       this.selectedStudent = res.studentDetails;\n//       //console.log(res.studentDetails);\n//       console.log(this.selectedStudent);\n//     })\n//   }\n//   clearSelectedStudent() {\n//     this.selectedStudent = null;\n//   }\n//   go_to_login() {\n//     this.router.navigate(['/vt_login'])\n//   }\n//   //select json file and upload\n//   onFileSelected(event: any): void {\n//     const file = event.target.files[0];\n//     if (file) {\n//       const reader = new FileReader();\n//       reader.onload = (e) => {\n//         //It checks if e and e.target are not null or undefined before attempting to access e.target. \n//         //The result is cast to FileReader type, and then .result is accessed and cast as a string.\n//         const fileContent = (e.target as FileReader)?.result as string;\n//         this.parseJson(fileContent);\n//          this.logFilteredData(); // Log the filtered data before sending to the backend\n//         // this.uploadDataToBackend();\n//         this.showDailyDiarySection = true; \n//       };\n//       reader.readAsText(file);\n//     }\n//   }\n//   private parseJson(jsonString: string): void {\n//     try {\n//       const jsonData = JSON.parse(jsonString);\n//       this.studentDataFromJson = jsonData;\n//       console.log(\"stu_data from json\", this.studentDataFromJson);\n//       // this.hoursData = Object.values(this.studentDataFromJson.fieldInfo.hour);\n//     } catch (error) {\n//       console.log(\"Error parsing JSON:\", error);\n//     }\n//   }\n//   //here new obj for filtered data from scanned file to send to backend\n//   // private logFilteredData(): void {\n//   //   if (this.studentDataFromJson) {\n//   //     const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n//   //     const sortedData: TaskData[] = [];\n//   //     // Extract the 'Year' and 'Month' from the scanned file\n//   //     const year = this.studentDataFromJson.fieldInfo['Year'];\n//   //     const month = this.studentDataFromJson.fieldInfo['Month'];\n//   //     tasks.forEach((task) => {\n//   //       const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n//   //       console.log(\"TaskName=\",taskName);\n//   //       // Skip if TaskName is empty\n//   //       if (!taskName) {\n//   //         return;\n//   //       }\n//   //       for (let i = 1; i <= 13; i++) {\n//   //         const tickKey = `${task}Tick${i}`;\n//   //         const monthDayKey = `MonthDay${i}`;\n//   //         const hourKey = `hour${i}`;\n//   //         const minuteKey = `minutes${i}`;\n//   //         const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n//   //         console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n//   //         // Only include tasks with tick value 1\n//   //         if (performedValue === 'Yes') {\n//   //           const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n//   //           const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n//   //           const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n//   //           const minutesPresent = minuteValue !== ''; // Check if minutes are present\n//   //           // Form the date string directly\n//   //           const date = `${year}-${month}-${monthDayValue}`;\n//   //           const taskObj = {\n//   //             TaskName: taskName,\n//   //             Performed: performedValue,\n//   //             Date: date,\n//   //             Hour: hourValue,\n//   //             Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n//   //           };\n//   //           // Check if the task is already in the sortedData array\n//   //           const existingTask = sortedData.find((item) => item.TaskName === taskName && item.Date === date);\n//   //           if (!existingTask) {\n//   //             sortedData.push(taskObj);\n//   //           }\n//   //         }\n//   //       }\n//   //     });\n//   //     // Sort the array based on TaskName, Date\n//   //     sortedData.sort((a, b) => {\n//   //       const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n//   //       return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n//   //     });\n//   //     console.log(\"sortedData =\", sortedData);\n//   //   }\n//   // }\n//   private logFilteredData(): void {\n//     if (this.studentDataFromJson) {\n//       const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n//       const taskData: any[] = [];\n//       tasks.forEach((task) => {\n//         const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n//         console.log(\"TaskName=\", taskName);\n//         // Skip if TaskName is empty\n//         if (!taskName) {\n//           return;\n//         }\n//         const taskTicks: number[] = [];\n//         for (let i = 1; i <= 13; i++) {\n//           const tickKey = `${task}Tick${i}`;\n//           const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 1 : 0;\n//           console.log(\"Tick\", performedValue);\n//           taskTicks.push(performedValue);\n//         }\n//         const taskObj = {\n//           TaskName: taskName,\n//           TaskTicks: taskTicks,\n//         };\n//         taskData.push(taskObj);\n//       });\n//       console.log(\"taskData =\", taskData);\n//       // use taskData to display in the template\n//       this.taskData = taskData; \n//     }\n//   }\n// }\n// interface TaskData {\n//   TaskName: string;\n//   Performed: string;//Performed means TaskTick\n//  Date: string;\n//   Hour: string;\n//   Minutes?: string;\n// }","map":{"version":3,"mappingsnames":[],"sourceRoot":"","sources":["D:\\project angular\\Student_Task_Tracker\\ClientApp\\src\\app\\VT_Section\\student-dashboard\\student-dashboard.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n// import { Router } from '@angular/router';\n// import { ApiService } from 'src/app/shared/api.service';\n// import { AuthserviceService } from 'src/app/shared/authservice.service';\n\n// @Component({\n//   selector: 'app-student-dashboard',\n//   templateUrl: './student-dashboard.component.html',\n//   styleUrls: ['./student-dashboard.component.css']\n// })\n// export class StudentDashboardComponent {\n//   studentData !: any;\n//   selectedStudent: any;\n//   studentDataFromJson: any;\n//   email!: string; //display emailid of vt to student dashboard\n\n//   showDailyDiarySection: boolean = false;\n//   MonthDaysData: string[]=['MonthDay1','MonthDay2','MonthDay3','MonthDay4','MonthDay5','MonthDay6','MonthDay7','MonthDay8','MonthDay9','MonthDay10','MonthDay11','MonthDay12','MonthDay13'];\n//   hoursData: string[] = ['hour1', 'hour2', 'hour3', 'hour4', 'hour5', 'hour6', 'hour7', 'hour8', 'hour9', 'hour10', 'hour11', 'hour12', 'hour13'];\n//   minutesData: string[] = ['minutes1','minutes2','minutes3','minutes4','minutes5','minutes6','minutes7','minutes8','minutes9','minutes10','minutes11','minutes12','minutes13'];\n//  // Task1TickData: string[] = ['Task1Tick1','Task1Tick2','Task1Tick3','Task1Tick4','Task1Tick5','Task1Tick6','Task1Tick7','Task1Tick8','Task1Tick9','Task1Tick10','Task1Tick11','Task1Tick12','Task1Tick13']\n//   taskData: any[] | undefined;\n\n\n//   constructor(private apiservice: ApiService,\n//     private router: Router,\n//     private authservice : AuthserviceService) { }\n\n//   ngOnInit(): void {\n//     this.getAllStudents();\n//     this.email = this.authservice.getEmail();//display emailid of vt to student dashboard\n//   }\n\n//   getAllStudents() {\n//     this.apiservice.getStudents().subscribe((res: any) => {\n\n//       this.studentData = res.studentDetails;\n//       console.log(res.studentDetails);\n//     })\n//   }\n//   selectStudent(id: number) {\n//     this.apiservice.getStudentById(id).subscribe((res) => {\n//       this.selectedStudent = res.studentDetails;\n//       //console.log(res.studentDetails);\n//       console.log(this.selectedStudent);\n//     })\n//   }\n//   clearSelectedStudent() {\n//     this.selectedStudent = null;\n//   }\n//   go_to_login() {\n//     this.router.navigate(['/vt_login'])\n//   }\n\n//   //select json file and upload\n//   onFileSelected(event: any): void {\n//     const file = event.target.files[0];\n//     if (file) {\n//       const reader = new FileReader();\n//       reader.onload = (e) => {\n//         //It checks if e and e.target are not null or undefined before attempting to access e.target. \n//         //The result is cast to FileReader type, and then .result is accessed and cast as a string.\n//         const fileContent = (e.target as FileReader)?.result as string;\n//         this.parseJson(fileContent);\n//          this.logFilteredData(); // Log the filtered data before sending to the backend\n//         // this.uploadDataToBackend();\n//         this.showDailyDiarySection = true; \n//       };\n//       reader.readAsText(file);\n//     }\n//   }\n//   private parseJson(jsonString: string): void {\n//     try {\n//       const jsonData = JSON.parse(jsonString);\n//       this.studentDataFromJson = jsonData;\n//       console.log(\"stu_data from json\", this.studentDataFromJson);\n//       // this.hoursData = Object.values(this.studentDataFromJson.fieldInfo.hour);\n//     } catch (error) {\n//       console.log(\"Error parsing JSON:\", error);\n//     }\n//   }\n\n//   //here new obj for filtered data from scanned file to send to backend\n//   // private logFilteredData(): void {\n//   //   if (this.studentDataFromJson) {\n//   //     const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n//   //     const sortedData: TaskData[] = [];\n  \n//   //     // Extract the 'Year' and 'Month' from the scanned file\n//   //     const year = this.studentDataFromJson.fieldInfo['Year'];\n//   //     const month = this.studentDataFromJson.fieldInfo['Month'];\n  \n//   //     tasks.forEach((task) => {\n//   //       const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n//   //       console.log(\"TaskName=\",taskName);\n  \n//   //       // Skip if TaskName is empty\n//   //       if (!taskName) {\n//   //         return;\n//   //       }\n  \n//   //       for (let i = 1; i <= 13; i++) {\n//   //         const tickKey = `${task}Tick${i}`;\n//   //         const monthDayKey = `MonthDay${i}`;\n//   //         const hourKey = `hour${i}`;\n//   //         const minuteKey = `minutes${i}`;\n  \n//   //         const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n//   //         console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n  \n//   //         // Only include tasks with tick value 1\n//   //         if (performedValue === 'Yes') {\n//   //           const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n//   //           const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n//   //           const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n  \n//   //           const minutesPresent = minuteValue !== ''; // Check if minutes are present\n  \n//   //           // Form the date string directly\n//   //           const date = `${year}-${month}-${monthDayValue}`;\n  \n//   //           const taskObj = {\n//   //             TaskName: taskName,\n//   //             Performed: performedValue,\n//   //             Date: date,\n//   //             Hour: hourValue,\n//   //             Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n//   //           };\n  \n//   //           // Check if the task is already in the sortedData array\n//   //           const existingTask = sortedData.find((item) => item.TaskName === taskName && item.Date === date);\n  \n//   //           if (!existingTask) {\n//   //             sortedData.push(taskObj);\n//   //           }\n//   //         }\n//   //       }\n//   //     });\n  \n//   //     // Sort the array based on TaskName, Date\n//   //     sortedData.sort((a, b) => {\n//   //       const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n//   //       return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n//   //     });\n  \n//   //     console.log(\"sortedData =\", sortedData);\n//   //   }\n//   // }\n\n//   private logFilteredData(): void {\n//     if (this.studentDataFromJson) {\n//       const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n//       const taskData: any[] = [];\n  \n//       tasks.forEach((task) => {\n//         const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n//         console.log(\"TaskName=\", taskName);\n  \n//         // Skip if TaskName is empty\n//         if (!taskName) {\n//           return;\n//         }\n  \n//         const taskTicks: number[] = [];\n  \n//         for (let i = 1; i <= 13; i++) {\n//           const tickKey = `${task}Tick${i}`;\n//           const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 1 : 0;\n//           console.log(\"Tick\", performedValue);\n  \n//           taskTicks.push(performedValue);\n//         }\n  \n//         const taskObj = {\n//           TaskName: taskName,\n//           TaskTicks: taskTicks,\n//         };\n  \n//         taskData.push(taskObj);\n//       });\n  \n//       console.log(\"taskData =\", taskData);\n  \n//       // use taskData to display in the template\n//       this.taskData = taskData; \n//     }\n//   }\n// }\n\n// interface TaskData {\n//   TaskName: string;\n//   Performed: string;//Performed means TaskTick\n//  Date: string;\n//   Hour: string;\n//   Minutes?: string;\n// }\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}