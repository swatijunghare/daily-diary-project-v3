{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.loginAPIUrl = \"https://localhost:7158/Login/\";\n    this.studentAPIUrl = \"https://localhost:7158/Student/\";\n    this.apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\n    this.apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb';\n  }\n  getStudents() {\n    return this.http.get(`${this.studentAPIUrl}get_all_student`).pipe(map(res => {\n      return res;\n    }));\n  }\n  getStudentById(id) {\n    return this.http.get(`${this.studentAPIUrl}get_student/${id}`).pipe(map(res => {\n      return res;\n    }));\n  }\n  login(vtObj) {\n    return this.http.post(`${this.loginAPIUrl}login`, vtObj);\n  }\n  addDailyDiaryRecord(recordObj) {\n    return this.http.post(`${this.studentAPIUrl}add_daily_diary_record`, recordObj, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    });\n  }\n  uploadCompressedImg(compressedBase64) {\n    // Convert the base64 string back to a Uint8Array\n    const byteCharacters = atob(compressedBase64);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    const formData = new FormData();\n    const formName = 'api_form_v1';\n    formData.append('formName', formName);\n    formData.append('formImage', new Blob([byteArray], {\n      type: 'image/jpeg'\n    }), 'compressed_image.jpg');\n    formData.append('metadata', '{}');\n    formData.append('realTimeRespType', 'simpleKeyValue');\n    //console.log('Before sendData:', compressedBase64);\n    return this.http.post(this.apiUrl, formData, {\n      headers: {\n        'x-api-key': this.apiKey\n      }\n    });\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;AAC5D,SAAqBC,GAAG,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,UAAU;EAMrBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IALjB,gBAAW,GAAY,+BAA+B;IACtD,kBAAa,GAAY,iCAAiC;IACzD,WAAM,GAAG,8CAA8C;IACvD,WAAM,GAAG,qCAAqC;EAEf;EAEvCC,WAAW;IACT,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAM,GAAG,IAAI,CAACC,aAAa,iBAAiB,CAAC,CAChEC,IAAI,CAACP,GAAG,CAAEQ,GAAO,IAAG;MACnB,OAAOA,GAAG;IACZ,CAAC,CAAC,CAAC;EACL;EACAC,cAAc,CAACC,EAAS;IACtB,OAAO,IAAI,CAACP,IAAI,CAACE,GAAG,CAAM,GAAG,IAAI,CAACC,aAAa,eAAeI,EAAE,EAAE,CAAC,CAClEH,IAAI,CAACP,GAAG,CAAEQ,GAAO,IAAG;MACnB,OAAOA,GAAG;IACZ,CAAC,CAAC,CAAC;EACL;EACAG,KAAK,CAACC,KAAW;IACf,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAM,GAAG,IAAI,CAACC,WAAW,OAAO,EAACF,KAAK,CAAC;EAC9D;EAEEG,mBAAmB,CAACC,SAAe;IACjC,OAAO,IAAI,CAACb,IAAI,CAACU,IAAI,CAAM,GAAG,IAAI,CAACP,aAAa,wBAAwB,EAACU,SAAS,EAAC;MACjFC,OAAO,EAAE,IAAIlB,WAAW,CAAC;QACvB,cAAc,EAAG;OAClB;KACF,CAAC;EACJ;EAEFmB,mBAAmB,CAACC,gBAAwB;IAC1C;IACA,MAAMC,cAAc,GAAGC,IAAI,CAACF,gBAAgB,CAAC;IAC7C,MAAMG,WAAW,GAAG,IAAIC,KAAK,CAACH,cAAc,CAACI,MAAM,CAAC;IACpD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC9CH,WAAW,CAACG,CAAC,CAAC,GAAGL,cAAc,CAACM,UAAU,CAACD,CAAC,CAAC;;IAE/C,MAAME,SAAS,GAAG,IAAIC,UAAU,CAACN,WAAW,CAAC;IAE7C,MAAMO,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,MAAMC,QAAQ,GAAG,aAAa;IAE9BF,QAAQ,CAACG,MAAM,CAAC,UAAU,EAAED,QAAQ,CAAC;IACrCF,QAAQ,CAACG,MAAM,CAAC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAACN,SAAS,CAAC,EAAE;MAAEO,IAAI,EAAE;IAAY,CAAE,CAAC,EAAE,sBAAsB,CAAC;IACnGL,QAAQ,CAACG,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;IACjCH,QAAQ,CAACG,MAAM,CAAC,kBAAkB,EAAE,gBAAgB,CAAC;IAErD;IACA,OAAO,IAAI,CAAC7B,IAAI,CAACU,IAAI,CAAC,IAAI,CAACsB,MAAM,EAAEN,QAAQ,EAAE;MAC3CZ,OAAO,EAAE;QACP,WAAW,EAAE,IAAI,CAACmB;;KAErB,CAAC;EACJ;;AAvDWnC,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAoC,SAAVpC,UAAU;EAAAqC,YAFT;AAAM","names":["HttpHeaders","map","ApiService","constructor","http","getStudents","get","studentAPIUrl","pipe","res","getStudentById","id","login","vtObj","post","loginAPIUrl","addDailyDiaryRecord","recordObj","headers","uploadCompressedImg","compressedBase64","byteCharacters","atob","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","formData","FormData","formName","append","Blob","type","apiUrl","apiKey","factory","providedIn"],"sourceRoot":"","sources":["D:\\project angular\\Student_Task_Tracker\\ClientApp\\src\\app\\shared\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  public loginAPIUrl : string = \"https://localhost:7158/Login/\";\n  public studentAPIUrl : string = \"https://localhost:7158/Student/\";\n  private apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\n  private apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb';\n\n  constructor(private http:HttpClient) { }\n\n  getStudents(){\n    return this.http.get<any>(`${this.studentAPIUrl}get_all_student`)\n    .pipe(map((res:any)=>{\n      return res; \n    }))\n  }\n  getStudentById(id:number){\n    return this.http.get<any>(`${this.studentAPIUrl}get_student/${id}`)\n    .pipe(map((res:any)=>{\n      return res;\n    }))\n  }\n  login(vtObj : any){\n    return this.http.post<any>(`${this.loginAPIUrl}login`,vtObj);\n  }\n\n    addDailyDiaryRecord(recordObj : any){\n      return this.http.post<any>(`${this.studentAPIUrl}add_daily_diary_record`,recordObj,{\n        headers: new HttpHeaders({\n          'Content-Type' : 'application/json';\n        })\n      });\n    }\n\n  uploadCompressedImg(compressedBase64: string): Observable<any> {\n    // Convert the base64 string back to a Uint8Array\n    const byteCharacters = atob(compressedBase64);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n  \n    const formData = new FormData();\n    const formName = 'api_form_v1';\n  \n    formData.append('formName', formName);\n    formData.append('formImage', new Blob([byteArray], { type: 'image/jpeg' }), 'compressed_image.jpg');\n    formData.append('metadata', '{}');\n    formData.append('realTimeRespType', 'simpleKeyValue');\n  \n    //console.log('Before sendData:', compressedBase64);\n    return this.http.post(this.apiUrl, formData, {\n      headers: {\n        'x-api-key': this.apiKey,\n      },\n    });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}