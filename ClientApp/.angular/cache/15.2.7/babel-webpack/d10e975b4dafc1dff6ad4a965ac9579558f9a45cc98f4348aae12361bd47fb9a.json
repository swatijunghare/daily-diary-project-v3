{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nlet StudentDashboardComponent = class StudentDashboardComponent {\n  constructor(apiservice, router, authservice, imageCompressService) {\n    this.apiservice = apiservice;\n    this.router = router;\n    this.authservice = authservice;\n    this.imageCompressService = imageCompressService;\n    this.showDailyDiarySection = false;\n    this.MonthDaysData = ['MonthDay1', 'MonthDay2', 'MonthDay3', 'MonthDay4', 'MonthDay5', 'MonthDay6', 'MonthDay7', 'MonthDay8', 'MonthDay9'];\n    this.HoursData = ['Hour1', 'Hour2', 'Hour3', 'Hour4', 'Hour5', 'Hour6', 'Hour7', 'Hour8', 'Hour9'];\n    this.MinutesData = ['Minutes1', 'Minutes2', 'Minutes3', 'Minutes4', 'Minutes5', 'Minutes6', 'Minutes7', 'Minutes8', 'Minutes9'];\n    this.selectedImage = null;\n    this.compressedBase64 = null;\n    this.isIdMatching = false;\n    this.sortedData = [];\n  }\n  ngOnInit() {\n    this.getAllStudents();\n    this.email = this.authservice.getEmail(); //display emailid of vt to student dashboard\n    //this.Final_DailyDiary_Record();\n  }\n\n  getAllStudents() {\n    this.apiservice.getStudents().subscribe(res => {\n      this.studentData = res.studentDetails;\n      console.log(res.studentDetails);\n    });\n  }\n  selectStudent(id) {\n    // Reset previous data\n    this.selectedStudent = null;\n    this.stud_Id = null;\n    this.studentDataFromJson = null;\n    this.showDailyDiarySection = false;\n    this.apiservice.getStudentById(id).subscribe({\n      next: res => {\n        this.selectedStudent = res.studentDetails;\n        this.stud_Id = id; // Set stud_Id here\n        console.log(this.selectedStudent);\n        console.log(\"stu_id\", this.stud_Id);\n      },\n      error: error => {\n        console.error('Error in selectStudent:', error);\n      }\n    });\n  }\n  clearSelectedStudent() {\n    this.selectedStudent = null;\n  }\n  go_to_login() {\n    this.router.navigate(['/vt_login']);\n  }\n  //select image\n  onFileSelected(event) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n      this.compressAndUpload(); //call function to compress and upload image on http post\n    }\n  }\n  //function to compress image and upload it\n  compressAndUpload() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result;\n        this.imageCompressService.compressFile(base64String, -1, 60, 60).then(compressedBase64 => {\n          const compressedSizeInBytes = compressedBase64.length;\n          const compressedSizeInKB = compressedSizeInBytes / 1024;\n          console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n          this.compressedBase64 = compressedBase64;\n          // Call your API service here to send the compressed image\n          this.onUploadAndProcessData();\n        }).catch(error => {\n          console.error('Image Compression Error:', error);\n        });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n  //send upload file to http post and get json data and show in table\n  onUploadAndProcessData() {\n    if (this.compressedBase64) {\n      console.log('Sending Compressed Image Size:', this.compressedBase64.length / 1024, 'KB');\n      // Call your API service to upload the compressed image\n      this.apiservice.uploadCompressedImg(this.compressedBase64.split(',')[1]).subscribe({\n        next: response => {\n          console.log('API Response:', response);\n          //getting Student_Id from json api rsponse\n          const jsonstudentID = Number(response.fieldInfo.StudentID);\n          console.log('jsonstudentID:', jsonstudentID);\n          if (!isNaN(jsonstudentID) && jsonstudentID === this.stud_Id) {\n            console.log(\"id matching\");\n            alert(\"Record Found !!Fetching Details\");\n            this.isIdMatching = true;\n            this.studentDataFromJson = response;\n            this.jsonData();\n            this.Final_DailyDiary_Record();\n            //this.populateSortedData();\n            this.showDailyDiarySection = true;\n          } else {\n            console.log(\"Id not matching\");\n            alert(\"Student Id Is not Matching.Sorry!!\");\n          }\n        },\n        error: error => {\n          console.error('API Error:', error);\n        }\n      });\n    }\n  }\n  //function getting json \n  jsonData() {\n    console.log(\"json Data\");\n    if (this.studentDataFromJson) {\n      console.log(\"jsonData=\", this.studentDataFromJson);\n      const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6', 'Task7'];\n      const taskData = [];\n      tasks.forEach(task => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n        const taskTicks = [];\n        for (let i = 1; i <= 9; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const monthDayKey = `MonthDay${i}`;\n          const hourKey = `Hour${i}`;\n          const minuteKey = `Minutes${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 1 : 0;\n          taskTicks.push(performedValue);\n        }\n        const taskObj = {\n          TaskName: taskName,\n          TaskTicks: taskTicks\n        };\n        taskData.push(taskObj);\n      });\n      // use taskData to display in the template\n      this.taskData = taskData;\n    }\n  }\n  //here sotrted data from json file to send to backend\n  //sorted data as as method/function\n  Final_DailyDiary_Record() {\n    if (this.studentDataFromJson) {\n      const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6', 'Task7'];\n      const sortedData = [];\n      // Extract the 'Year' and 'Month' from the scanned file\n      const year = this.studentDataFromJson.fieldInfo['Year'];\n      const month = this.studentDataFromJson.fieldInfo['Month'];\n      tasks.forEach(task => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n        // console.log(\"TaskName=\",taskName);\n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n        const taskTicks = [];\n        for (let i = 1; i <= 9; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const monthDayKey = `MonthDay${i}`;\n          const hourKey = `Hour${i}`;\n          const minuteKey = `Minutes${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n          //  console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n          // taskTicks.push(performedValue);\n          // Only include tasks with tick value 1\n          if (performedValue === 'Yes') {\n            const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n            const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n            const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n            const minutesPresent = minuteValue !== ''; // Check if minutes are present\n            // Form the date string directly\n            const date = `${year}-${month}-${monthDayValue}`;\n            const taskObj = {\n              TaskName: taskName,\n              Performed: performedValue,\n              Date: date,\n              hour: hourValue,\n              Minutes: minutesPresent ? minuteValue : '00',\n              Stud_Id: this.stud_Id\n            };\n            // Check if the task is already in the sortedData array\n            const existingTask = sortedData.find(item => item.TaskName === taskName && item.Date === date);\n            if (!existingTask) {\n              sortedData.push(taskObj);\n            }\n          }\n        }\n      });\n      // Sort the array based on TaskName, Date\n      sortedData.sort((a, b) => {\n        const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n        return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n      });\n      console.log(\"sortedData =\", sortedData);\n      this.addingDailyDiaryRecord(sortedData);\n    }\n  }\n  // Define sortedData as a method to populate the array\n  // populateSortedData(): void {\n  //   if (this.studentDataFromJson) {\n  //     const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n  //     // Clear sortedData before populating\n  //     this.sortedData1 = [];\n  //     // Extract the 'Year' and 'Month' from the scanned file\n  //     const year = this.studentDataFromJson.fieldInfo['Year'];\n  //     const month = this.studentDataFromJson.fieldInfo['Month'];\n  //     tasks.forEach((task) => {\n  //       const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n  //       // Skip if TaskName is empty\n  //       if (!taskName) {\n  //         return;\n  //       }\n  //       for (let i = 1; i <= 9; i++) {\n  //         const tickKey = `${task}Tick${i}`;\n  //         const monthDayKey = `MonthDay${i}`;\n  //         const hourKey = `Hour${i}`;\n  //         const minuteKey = `Minutes${i}`;\n  //         const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n  //         // Only include tasks with tick value 1\n  //         if (performedValue === 'Yes') {\n  //           const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n  //           const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n  //           const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n  //           const minutesPresent = minuteValue !== ''; // Check if minutes are present\n  //           // Form the date string directly\n  //           const date = `${year}-${month}-${monthDayValue}`;\n  //           const taskObj: TaskData = {\n  //             TaskName: taskName,\n  //             Performed: performedValue,\n  //             Date: date,\n  //             hour: hourValue,\n  //             Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n  //             Stud_Id: this.stud_Id\n  //           };\n  //           // Check if the task is already in the sortedData array\n  //           const existingTask = this.sortedData1.find((item) => item.TaskName === taskName && item.Date === date);\n  //           if (!existingTask) {\n  //             this.sortedData1.push(taskObj);\n  //           }\n  //         }\n  //       }\n  //     });\n  //     // Sort the array based on TaskName, Date\n  //     this.sortedData1.sort((a, b) => {\n  //       const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n  //       return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n  //     });\n  //     console.log(\"sortedData1 =\", this.sortedData1);\n  //     this.addingSingleDDRecord();\n  //   }\n  // }\n  //method to get single record\n  // getSingleRecord(): TaskData | undefined {\n  //   return this.sortedData1.length > 0 ? this.sortedData1[0] : undefined;\n  // }\n  addingDailyDiaryRecord(sortedData) {\n    // const recordToSend = sortedData.map(record =>  ({ ...record, Stud_Id: record.stud_Id}));\n    console.log(\"stud id =\", this.stud_Id);\n    console.log(\"recordto send=\", sortedData);\n    this.apiservice.addDailyDiaryRecord(sortedData).subscribe({\n      next: res => {\n        console.log(\"ddRecord=\", res);\n      },\n      error: err => {\n        console.error(\"Error:\", err);\n        if (err instanceof HttpErrorResponse) {\n          console.error(\"Error Status:\", err.status);\n          console.error(\"Error Response:\", err.error);\n          if (err.error && err.error.errors) {\n            console.error(\"Validation Errors:\", err.error.errors);\n          }\n        }\n      }\n    });\n  }\n};\nStudentDashboardComponent = __decorate([Component({\n  selector: 'app-student-dashboard',\n  templateUrl: './student-dashboard.component.html',\n  styleUrls: ['./student-dashboard.component.css']\n})], StudentDashboardComponent);\nexport { StudentDashboardComponent };","map":{"version":3,"mappings":"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","names":["Component","HttpErrorResponse","StudentDashboardComponent","constructor","apiservice","router","authservice","imageCompressService","ngOnInit","getAllStudents","email","getEmail","getStudents","subscribe","res","studentData","studentDetails","console","log","selectStudent","id","selectedStudent","stud_Id","studentDataFromJson","showDailyDiarySection","getStudentById","next","error","clearSelectedStudent","go_to_login","navigate","onFileSelected","event","files","target","selectedImage","length","originalSizeInBytes","size","originalSizeInKB","toFixed","compressAndUpload","reader","FileReader","onload","base64String","result","compressFile","then","compressedBase64","compressedSizeInBytes","compressedSizeInKB","onUploadAndProcessData","catch","readAsDataURL","uploadCompressedImg","split","response","jsonstudentID","Number","fieldInfo","StudentID","isNaN","alert","isIdMatching","jsonData","Final_DailyDiary_Record","tasks","taskData","forEach","task","taskName","substring","taskTicks","i","tickKey","monthDayKey","hourKey","minuteKey","performedValue","push","taskObj","TaskName","TaskTicks","sortedData","year","month","monthDayValue","hourValue","minuteValue","minutesPresent","date","Performed","Date","hour","Minutes","Stud_Id","existingTask","find","item","sort","a","b","taskNameComparison","localeCompare","addingDailyDiaryRecord","addDailyDiaryRecord","err","status","errors","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\project angular\\Student_Task_Tracker\\ClientApp\\src\\app\\VT_Section\\student-dashboard\\student-dashboard.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ApiService } from 'src/app/shared/api.service';\nimport { AuthserviceService } from 'src/app/shared/authservice.service';\nimport { NgxImageCompressService } from 'ngx-image-compress';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n\n@Component({\n  selector: 'app-student-dashboard',\n  templateUrl: './student-dashboard.component.html',\n  styleUrls: ['./student-dashboard.component.css']\n})\nexport class StudentDashboardComponent {\n \n  studentData !: any;\n  selectedStudent: any;\n  studentDataFromJson: any;\n  email!: string; //display emailid of vt to student dashboard\n  showDailyDiarySection: boolean = false;\n  MonthDaysData: string[] = ['MonthDay1', 'MonthDay2', 'MonthDay3', 'MonthDay4', 'MonthDay5', 'MonthDay6', 'MonthDay7', 'MonthDay8', 'MonthDay9'];\n  HoursData: string[] = ['Hour1', 'Hour2', 'Hour3', 'Hour4', 'Hour5', 'Hour6', 'Hour7', 'Hour8', 'Hour9'];\n  MinutesData: string[] = ['Minutes1', 'Minutes2', 'Minutes3', 'Minutes4', 'Minutes5', 'Minutes6', 'Minutes7', 'Minutes8', 'Minutes9'];\n  // Task1TickData: string[] = ['Task1Tick1','Task1Tick2','Task1Tick3','Task1Tick4','Task1Tick5','Task1Tick6','Task1Tick7','Task1Tick8','Task1Tick9','Task1Tick10','Task1Tick11','Task1Tick12','Task1Tick13']\n  taskData: any[] | undefined;\n  selectedImage: File | null = null;\n  compressedBase64: string | null = null;\n  stud_Id: any;\n  isIdMatching :boolean = false;\n  public sortedData :TaskData[] = [];\n\n  constructor(private apiservice: ApiService,\n    private router: Router,\n    private authservice: AuthserviceService,\n    private imageCompressService: NgxImageCompressService\n\n  ) { }\n\n  ngOnInit(): void {\n    this.getAllStudents();\n    this.email = this.authservice.getEmail();//display emailid of vt to student dashboard\n    //this.Final_DailyDiary_Record();\n  }\n\n  getAllStudents() {\n    this.apiservice.getStudents().subscribe((res: any) => {\n\n      this.studentData = res.studentDetails;\n      console.log(res.studentDetails);\n    })\n  }\n  selectStudent(id: number): void {\n    // Reset previous data\n    this.selectedStudent = null;\n    this.stud_Id = null;\n    this.studentDataFromJson = null;\n    this.showDailyDiarySection = false;\n\n    this.apiservice.getStudentById(id).subscribe({\n      next: (res) => {\n        this.selectedStudent = res.studentDetails;\n        this.stud_Id = id;  // Set stud_Id here\n        console.log(this.selectedStudent);\n        console.log(\"stu_id\", this.stud_Id);\n      },\n      error: (error) => {\n        console.error('Error in selectStudent:', error);\n      }\n    });\n  }\n\n  clearSelectedStudent() {\n    this.selectedStudent = null;\n  }\n  go_to_login() {\n    this.router.navigate(['/vt_login'])\n  }\n\n  //select image\n  onFileSelected(event: any): void {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n      this.compressAndUpload(); //call function to compress and upload image on http post\n    }\n  }\n\n  //function to compress image and upload it\n  compressAndUpload(): void {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result as string;\n        this.imageCompressService\n          .compressFile(base64String, -1, 60, 60)\n          .then((compressedBase64: string) => {\n            const compressedSizeInBytes = compressedBase64.length;\n            const compressedSizeInKB = compressedSizeInBytes / 1024;\n            console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n            this.compressedBase64 = compressedBase64;\n            // Call your API service here to send the compressed image\n            this.onUploadAndProcessData();\n          })\n          .catch((error) => {\n            console.error('Image Compression Error:', error);\n          });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n\n  //send upload file to http post and get json data and show in table\n  onUploadAndProcessData(): void {\n    if (this.compressedBase64) {\n      console.log('Sending Compressed Image Size:', this.compressedBase64.length / 1024, 'KB');\n      // Call your API service to upload the compressed image\n      this.apiservice.uploadCompressedImg(this.compressedBase64.split(',')[1]).subscribe({\n        next: (response) => {\n          console.log('API Response:', response);\n\n          //getting Student_Id from json api rsponse\n          const jsonstudentID = Number(response.fieldInfo.StudentID);\n\n          console.log('jsonstudentID:', jsonstudentID);\n\n          if (!isNaN(jsonstudentID) && jsonstudentID === this.stud_Id) {\n            console.log(\"id matching\");\n            alert(\"Record Found !!Fetching Details\");\n           this.isIdMatching = true;\n            this.studentDataFromJson = response;\n            this.jsonData();\n            this.Final_DailyDiary_Record();\n            //this.populateSortedData();\n            this.showDailyDiarySection = true;\n          } else {\n            console.log(\"Id not matching\");\n            alert(\"Student Id Is not Matching.Sorry!!\")\n          }\n\n        },\n        error: (error) => {\n          console.error('API Error:', error);\n        },\n      });\n    }\n  }\n  //function getting json \n  private jsonData(): void {\n    console.log(\"json Data\");\n    if (this.studentDataFromJson) {\n      console.log(\"jsonData=\",this.studentDataFromJson);\n      const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6','Task7'];\n      const taskData: any[] = [];\n\n      tasks.forEach((task) => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n\n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n\n        const taskTicks: number[] = [];\n\n        for (let i = 1; i <= 9; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const monthDayKey = `MonthDay${i}`;\n          const hourKey = `Hour${i}`;\n          const minuteKey = `Minutes${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 1 : 0;\n\n          taskTicks.push(performedValue);\n        }\n\n        const taskObj = {\n          TaskName: taskName,\n          TaskTicks: taskTicks,\n        };\n\n        taskData.push(taskObj);\n      });\n      // use taskData to display in the template\n      this.taskData = taskData;\n    }\n  }\n  //here sotrted data from json file to send to backend\n  //sorted data as as method/function\n  private Final_DailyDiary_Record():  void {\n    if (this.studentDataFromJson) {\n      const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6','Task7'];\n      const sortedData: TaskData[] = []; \n\n      // Extract the 'Year' and 'Month' from the scanned file\n      const year = this.studentDataFromJson.fieldInfo['Year'];\n      const month = this.studentDataFromJson.fieldInfo['Month'];\n\n      tasks.forEach((task) => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n        // console.log(\"TaskName=\",taskName);\n\n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n\n        const taskTicks: number[] = [];\n\n        for (let i = 1; i <= 9; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const monthDayKey = `MonthDay${i}`;\n          const hourKey = `Hour${i}`;\n          const minuteKey = `Minutes${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n          //  console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n\n          // taskTicks.push(performedValue);\n          // Only include tasks with tick value 1\n          if (performedValue === 'Yes') {\n            const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n            const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n            const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n\n            const minutesPresent = minuteValue !== ''; // Check if minutes are present\n\n            // Form the date string directly\n            const date = `${year}-${month}-${monthDayValue}`;\n\n            const taskObj = {\n              TaskName: taskName,\n              Performed: performedValue,\n              Date: date,\n              hour: hourValue,\n              Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n              Stud_Id :this.stud_Id\n            };\n\n            // Check if the task is already in the sortedData array\n            const existingTask = sortedData.find((item) => item.TaskName === taskName && item.Date === date);\n\n            if (!existingTask) {\n              sortedData.push(taskObj);\n            }\n          }\n        }\n      });\n\n      // Sort the array based on TaskName, Date\n      sortedData.sort((a, b) => {\n        const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n        return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n      });\n\n      console.log(\"sortedData =\", sortedData);\n\n      this.addingDailyDiaryRecord(sortedData);\n    }\n  }\n\n  // Define sortedData as a method to populate the array\n  // populateSortedData(): void {\n  //   if (this.studentDataFromJson) {\n  //     const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n  //     // Clear sortedData before populating\n  //     this.sortedData1 = [];\n\n  //     // Extract the 'Year' and 'Month' from the scanned file\n  //     const year = this.studentDataFromJson.fieldInfo['Year'];\n  //     const month = this.studentDataFromJson.fieldInfo['Month'];\n\n  //     tasks.forEach((task) => {\n  //       const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n\n  //       // Skip if TaskName is empty\n  //       if (!taskName) {\n  //         return;\n  //       }\n\n  //       for (let i = 1; i <= 9; i++) {\n  //         const tickKey = `${task}Tick${i}`;\n  //         const monthDayKey = `MonthDay${i}`;\n  //         const hourKey = `Hour${i}`;\n  //         const minuteKey = `Minutes${i}`;\n  //         const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n\n  //         // Only include tasks with tick value 1\n  //         if (performedValue === 'Yes') {\n  //           const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n  //           const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n  //           const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n\n  //           const minutesPresent = minuteValue !== ''; // Check if minutes are present\n\n  //           // Form the date string directly\n  //           const date = `${year}-${month}-${monthDayValue}`;\n\n  //           const taskObj: TaskData = {\n  //             TaskName: taskName,\n  //             Performed: performedValue,\n  //             Date: date,\n  //             hour: hourValue,\n  //             Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n  //             Stud_Id: this.stud_Id\n  //           };\n\n  //           // Check if the task is already in the sortedData array\n  //           const existingTask = this.sortedData1.find((item) => item.TaskName === taskName && item.Date === date);\n\n  //           if (!existingTask) {\n  //             this.sortedData1.push(taskObj);\n  //           }\n  //         }\n  //       }\n  //     });\n\n  //     // Sort the array based on TaskName, Date\n  //     this.sortedData1.sort((a, b) => {\n  //       const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n  //       return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n  //     });\n\n  //     console.log(\"sortedData1 =\", this.sortedData1);\n  //     this.addingSingleDDRecord();\n  //   }\n\n  // }\n\n  //method to get single record\n  // getSingleRecord(): TaskData | undefined {\n  //   return this.sortedData1.length > 0 ? this.sortedData1[0] : undefined;\n  // }\n\n  addingDailyDiaryRecord(sortedData:any[]) : void {\n    // const recordToSend = sortedData.map(record =>  ({ ...record, Stud_Id: record.stud_Id}));\n    console.log(\"stud id =\",this.stud_Id);\n    console.log(\"recordto send=\",sortedData);\n    this.apiservice.addDailyDiaryRecord(sortedData).subscribe({\n      next : res =>{\n        console.log(\"ddRecord=\",res)\n      },\n      error: err => {\n        console.error(\"Error:\", err);\n        if (err instanceof HttpErrorResponse) {\n          console.error(\"Error Status:\", err.status);\n          console.error(\"Error Response:\", err.error);\n          if (err.error && err.error.errors) {\n            console.error(\"Validation Errors:\", err.error.errors);\n          }\n      }\n    }\n    })\n  }\n\n\n  //api call to service for single record\n  // addingSingleDDRecord(): void {\n  //     const singleRecord = this.getSingleRecord();\n  //     if (singleRecord) {\n  //       console.log(\"sendingSingleR_toAPI=\", singleRecord);\n  //       this.apiservice.addSingleDDRecord(singleRecord).subscribe({\n  //         next: (res) => {\n  //           console.log('Record sent successfully:', res);\n  //           this.recordSent = true; // Mark the record as sent\n  //         },\n  //         error: (error) => {\n  //           console.error('Error sending record:', error);\n  //           // Handle error response if needed\n  //         }\n  //       });\n  //     } else {\n  //       console.error('No single record found to send.');\n  //     }\n    \n  // } \n}\n\ninterface TaskData {\n  Stud_Id: number;\n  TaskName: string;\n  Performed: string;//Performed means TaskTick\n  Date: string;\n  hour: string;\n  Minutes?: string;\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}