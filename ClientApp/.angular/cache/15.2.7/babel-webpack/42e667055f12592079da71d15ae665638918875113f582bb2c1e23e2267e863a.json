{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/shared/api.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/shared/authservice.service\";\nimport * as i4 from \"ngx-image-compress\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../nav-menu/nav-menu.component\";\nfunction StudentDashboardComponent_tr_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\")(4, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function StudentDashboardComponent_tr_23_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const data_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.selectStudent(data_r3.stud_Id));\n    });\n    i0.ɵɵtext(5, \"Select Student\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const data_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(data_r3.fullname);\n  }\n}\nfunction StudentDashboardComponent_table_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\", 8)(1, \"thead\")(2, \"tr\")(3, \"th\", 9);\n    i0.ɵɵtext(4, \"Full Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\", 9);\n    i0.ɵɵtext(6, \"Email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\", 9);\n    i0.ɵɵtext(8, \"Mobile\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\", 9);\n    i0.ɵɵtext(10, \"Academic Year\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"tbody\")(14, \"tr\")(15, \"td\");\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"td\");\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"td\");\n    i0.ɵɵtext(20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"td\");\n    i0.ɵɵtext(22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"div\")(24, \"input\", 14, 15);\n    i0.ɵɵlistener(\"change\", function StudentDashboardComponent_table_24_Template_input_change_24_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onFileSelected($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function StudentDashboardComponent_table_24_Template_button_click_26_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const _r6 = i0.ɵɵreference(25);\n      return i0.ɵɵresetView(_r6.click());\n    });\n    i0.ɵɵtext(27, \"Select and Upload Image\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(16);\n    i0.ɵɵtextInterpolate(ctx_r1.selectedStudent.fullname);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.selectedStudent.email);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.selectedStudent.mobile);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.selectedStudent.academicyear);\n  }\n}\nfunction StudentDashboardComponent_div_25_td_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const MonthDay_r14 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r10.studentDataFromJson == null ? null : ctx_r10.studentDataFromJson.fieldInfo[MonthDay_r14]);\n  }\n}\nfunction StudentDashboardComponent_div_25_td_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const Hour_r15 = ctx.$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r11.studentDataFromJson == null ? null : ctx_r11.studentDataFromJson.fieldInfo[Hour_r15]);\n  }\n}\nfunction StudentDashboardComponent_div_25_td_37_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const Minute_r16 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r12.studentDataFromJson == null ? null : ctx_r12.studentDataFromJson.fieldInfo[Minute_r16]);\n  }\n}\nfunction StudentDashboardComponent_div_25_ng_container_38_td_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const tick_r19 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(tick_r19);\n  }\n}\nfunction StudentDashboardComponent_div_25_ng_container_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\")(2, \"td\", 28);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, StudentDashboardComponent_div_25_ng_container_38_td_4_Template, 2, 1, \"td\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const task_r17 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(task_r17.TaskName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", task_r17.TaskTicks);\n  }\n}\nfunction StudentDashboardComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"div\", 1)(2, \"div\", 3)(3, \"h4\", 18);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 19)(7, \"h6\");\n    i0.ɵɵtext(8);\n    i0.ɵɵpipe(9, \"titlecase\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\", 20);\n    i0.ɵɵtext(11, \"Student ID :\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 21);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 20);\n    i0.ɵɵtext(15, \"Month :\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 22);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"div\", 20);\n    i0.ɵɵtext(19, \"Year :\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"div\", 23);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(22, \"br\");\n    i0.ɵɵelementStart(23, \"table\", 24)(24, \"tr\")(25, \"td\", 25);\n    i0.ɵɵtext(26, \"Task\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"td\", 26);\n    i0.ɵɵtext(28, \"Day Of Month\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(29, StudentDashboardComponent_div_25_td_29_Template, 2, 1, \"td\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(30, \"tr\")(31, \"td\", 26);\n    i0.ɵɵtext(32, \"Hours\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(33, StudentDashboardComponent_div_25_td_33_Template, 2, 1, \"td\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"tr\")(35, \"td\", 26);\n    i0.ɵɵtext(36, \"Minutes\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(37, StudentDashboardComponent_div_25_td_37_Template, 2, 1, \"td\", 27);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(38, StudentDashboardComponent_div_25_ng_container_38_Template, 5, 2, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(39, \"div\", 1)(40, \"div\", 3)(41, \"h6\");\n    i0.ɵɵtext(42);\n    i0.ɵɵelementEnd()()()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.studentDataFromJson.targetName);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\"Name: \", i0.ɵɵpipeBind1(9, 10, ctx_r2.studentDataFromJson.fieldInfo.Name), \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r2.studentDataFromJson.fieldInfo.StudentID);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.studentDataFromJson.fieldInfo.Month);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.studentDataFromJson.fieldInfo.Year);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.MonthDaysData);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.HoursData);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.MinutesData);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.taskData);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r2.studentDataFromJson == null ? null : ctx_r2.studentDataFromJson.fieldInfo.OverallInternshipExperience);\n  }\n}\nexport class StudentDashboardComponent {\n  constructor(apiservice, router, authservice, imageCompressService) {\n    this.apiservice = apiservice;\n    this.router = router;\n    this.authservice = authservice;\n    this.imageCompressService = imageCompressService;\n    this.showDailyDiarySection = false;\n    this.MonthDaysData = ['MonthDay1', 'MonthDay2', 'MonthDay3', 'MonthDay4', 'MonthDay5', 'MonthDay6', 'MonthDay7', 'MonthDay8', 'MonthDay9'];\n    this.HoursData = ['Hour1', 'Hour2', 'Hour3', 'Hour4', 'Hour5', 'Hour6', 'Hour7', 'Hour8', 'Hour9'];\n    this.MinutesData = ['Minutes1', 'Minutes2', 'Minutes3', 'Minutes4', 'Minutes5', 'Minutes6', 'Minutes7', 'Minutes8', 'Minutes9'];\n    this.selectedImage = null;\n    this.compressedBase64 = null;\n  }\n  ngOnInit() {\n    this.getAllStudents();\n    this.email = this.authservice.getEmail(); //display emailid of vt to student dashboard\n  }\n\n  getAllStudents() {\n    this.apiservice.getStudents().subscribe(res => {\n      this.studentData = res.studentDetails;\n      console.log(res.studentDetails);\n    });\n  }\n  selectStudent(id) {\n    // Reset previous data\n    this.selectedStudent = null;\n    this.stud_Id = null;\n    this.studentDataFromJson = null;\n    this.showDailyDiarySection = false;\n    this.apiservice.getStudentById(id).subscribe({\n      next: res => {\n        this.selectedStudent = res.studentDetails;\n        this.stud_Id = id; // Set stud_Id here\n        console.log(this.selectedStudent);\n        console.log(\"stu_id\", this.stud_Id);\n      },\n      error: error => {\n        console.error('Error in selectStudent:', error);\n      }\n    });\n  }\n  clearSelectedStudent() {\n    this.selectedStudent = null;\n  }\n  go_to_login() {\n    this.router.navigate(['/vt_login']);\n  }\n  //select image\n  onFileSelected(event) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n      this.compressAndUpload(); //call function to compress and upload image on http post\n    }\n  }\n  //function to compress image and upload it\n  compressAndUpload() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result;\n        this.imageCompressService.compressFile(base64String, -1, 60, 60).then(compressedBase64 => {\n          const compressedSizeInBytes = compressedBase64.length;\n          const compressedSizeInKB = compressedSizeInBytes / 1024;\n          console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n          this.compressedBase64 = compressedBase64;\n          // Call your API service here to send the compressed image\n          this.onUploadAndProcessData();\n        }).catch(error => {\n          console.error('Image Compression Error:', error);\n        });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n  //send upload file to http post and get json data and show in table\n  onUploadAndProcessData() {\n    if (this.compressedBase64) {\n      console.log('Sending Compressed Image Size:', this.compressedBase64.length / 1024, 'KB');\n      // Call your API service to upload the compressed image\n      this.apiservice.uploadCompressedImg(this.compressedBase64.split(',')[1]).subscribe({\n        next: response => {\n          console.log('API Response:', response);\n          //getting Student_Id from json api rsponse\n          const jsonstudentID = Number(response.fieldInfo.StudentID);\n          console.log('jsonstudentID:', jsonstudentID);\n          if (!isNaN(jsonstudentID) && jsonstudentID === this.stud_Id) {\n            console.log(\"id matching\");\n            alert(\"Record Found !!Fetching Details\");\n            this.studentDataFromJson = response;\n            this.jsonData();\n            this.sortedData();\n            //this.populateSortedData();\n            this.showDailyDiarySection = true;\n          } else {\n            console.log(\"Id not matching\");\n            alert(\"Student Id Is not Matching.Sorry!!\");\n          }\n        },\n        error: error => {\n          console.error('API Error:', error);\n        }\n      });\n    }\n  }\n  //function getting json \n  jsonData() {\n    if (this.studentDataFromJson) {\n      console.log(\"jsonData=\", this.studentDataFromJson);\n      //  const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6','Task7'];\n      const tasks = [];\n      // Extract task names dynamically from the response object\n      for (const key in this.studentDataFromJson.fieldInfo) {\n        if (key.startsWith('TaskName')) {\n          const taskName = this.studentDataFromJson.fieldInfo[key];\n          if (taskName) {\n            tasks.push(taskName);\n          }\n          console.log(\"tasks =\", tasks);\n        }\n      }\n      const taskData = [];\n      // const sortedData: TaskData[] = [];\n      // Extract the 'Year' and 'Month' from the scanned file\n      const year = this.studentDataFromJson.fieldInfo['Year'];\n      const month = this.studentDataFromJson.fieldInfo['Month'];\n      tasks.forEach(task => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n        // console.log(\"TaskName=\", taskName);\n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n        const taskTicks = [];\n        for (let i = 1; i <= 9; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const monthDayKey = `MonthDay${i}`;\n          const hourKey = `Hour${i}`;\n          const minuteKey = `Minutes${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 1 : 0;\n          //console.log(\"Tick\", performedValue);\n          taskTicks.push(performedValue);\n        }\n        const taskObj = {\n          TaskName: taskName,\n          TaskTicks: taskTicks\n        };\n        taskData.push(taskObj);\n      });\n      // use taskData to display in the template\n      this.taskData = taskData;\n    }\n  }\n  //here sotrted data from json file to send to backend\n  //sorted data as as method/function\n  // private sortedData():  void {\n  //   if (this.studentDataFromJson) {\n  //     const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6','Task7'];\n  //     const sortedData: TaskData[] = []; \n  //     // Extract the 'Year' and 'Month' from the scanned file\n  //     const year = this.studentDataFromJson.fieldInfo['Year'];\n  //     const month = this.studentDataFromJson.fieldInfo['Month'];\n  //     tasks.forEach((task) => {\n  //       const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n  //       // console.log(\"TaskName=\",taskName);\n  //       // Skip if TaskName is empty\n  //       if (!taskName) {\n  //         return;\n  //       }\n  //       const taskTicks: number[] = [];\n  //       for (let i = 1; i <= 9; i++) {\n  //         const tickKey = `${task}Tick${i}`;\n  //         const monthDayKey = `MonthDay${i}`;\n  //         const hourKey = `Hour${i}`;\n  //         const minuteKey = `Minutes${i}`;\n  //         const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n  //         //  console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n  //         // taskTicks.push(performedValue);\n  //         // Only include tasks with tick value 1\n  //         if (performedValue === 'Yes') {\n  //           const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n  //           const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n  //           const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n  //           const minutesPresent = minuteValue !== ''; // Check if minutes are present\n  //           // Form the date string directly\n  //           const date = `${year}-${month}-${monthDayValue}`;\n  //           const taskObj = {\n  //             TaskName: taskName,\n  //             Performed: performedValue,\n  //             Date: date,\n  //             hour: hourValue,\n  //             Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n  //             Stud_Id :this.stud_Id\n  //           };\n  //           // Check if the task is already in the sortedData array\n  //           const existingTask = sortedData.find((item) => item.TaskName === taskName && item.Date === date);\n  //           if (!existingTask) {\n  //             sortedData.push(taskObj);\n  //           }\n  //         }\n  //       }\n  //     });\n  //     // Sort the array based on TaskName, Date\n  //     sortedData.sort((a, b) => {\n  //       const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n  //       return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n  //     });\n  //     console.log(\"sortedData =\", sortedData);\n  //     //this.addingDailyDiaryRecord(sortedData);\n  //   }\n  // }\n  sortedData() {\n    const JSONDATA = this.jsonData();\n    console.log(\"JSONDATA=\", JSONDATA);\n    if (this.JSONDATA) {\n      const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6', 'Task7'];\n      const sortedData = [];\n      // Extract the 'Year' and 'Month' from the scanned file\n      const year = this.studentDataFromJson.fieldInfo['Year'];\n      const month = this.studentDataFromJson.fieldInfo['Month'];\n      tasks.forEach(task => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n        // console.log(\"TaskName=\",taskName);\n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n        const taskTicks = [];\n        for (let i = 1; i <= 9; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const monthDayKey = `MonthDay${i}`;\n          const hourKey = `Hour${i}`;\n          const minuteKey = `Minutes${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n          //  console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n          // taskTicks.push(performedValue);\n          // Only include tasks with tick value 1\n          if (performedValue === 'Yes') {\n            const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n            const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n            const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n            const minutesPresent = minuteValue !== ''; // Check if minutes are present\n            // Form the date string directly\n            const date = `${year}-${month}-${monthDayValue}`;\n            const taskObj = {\n              TaskName: taskName,\n              Performed: performedValue,\n              Date: date,\n              hour: hourValue,\n              Minutes: minutesPresent ? minuteValue : '00',\n              Stud_Id: this.stud_Id\n            };\n            // Check if the task is already in the sortedData array\n            const existingTask = sortedData.find(item => item.TaskName === taskName && item.Date === date);\n            if (!existingTask) {\n              sortedData.push(taskObj);\n            }\n          }\n        }\n      });\n      // Sort the array based on TaskName, Date\n      sortedData.sort((a, b) => {\n        const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n        return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n      });\n      console.log(\"sortedData =\", sortedData);\n      //this.addingDailyDiaryRecord(sortedData);\n    }\n  }\n}\n\nStudentDashboardComponent.ɵfac = function StudentDashboardComponent_Factory(t) {\n  return new (t || StudentDashboardComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthserviceService), i0.ɵɵdirectiveInject(i4.NgxImageCompressService));\n};\nStudentDashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: StudentDashboardComponent,\n  selectors: [[\"app-student-dashboard\"]],\n  decls: 26,\n  vars: 4,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"col-6\"], [1, \"col\"], [1, \"d-flex\", \"justify-content-end\", \"mt-3\"], [1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"col-4\", \"text-left\"], [1, \"col-8\", \"text-right\"], [1, \"table\", \"mt-3\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"table mt-3\", 4, \"ngIf\"], [\"class\", \"container border border-warning\", 4, \"ngIf\"], [1, \"btn\", \"btn-info\", 3, \"click\"], [\"type\", \"file\", 2, \"display\", \"none\", 3, \"change\"], [\"fileInput\", \"\"], [3, \"click\"], [1, \"container\", \"border\", \"border-warning\"], [1, \"text-center\"], [1, \"col-2\"], [1, \"col-1\"], [1, \"col-1\", \"border\", \"mt-1\", 2, \"text-align\", \"left\"], [1, \"col-1\", \"border\", \"mt-1\"], [1, \"col-1\", \"border\"], [1, \"table\", \"table-bordered\"], [\"rowspan\", \"3\", 1, \"border-left\"], [1, \"border-left\"], [\"class\", \"border-left\", 4, \"ngFor\", \"ngForOf\"], [\"colspan\", \"2\", 1, \"border-left\"]],\n  template: function StudentDashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"app-nav-menu\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 1)(6, \"div\", 3)(7, \"div\", 4)(8, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function StudentDashboardComponent_Template_button_click_8_listener() {\n        return ctx.go_to_login();\n      });\n      i0.ɵɵtext(9, \"Login\");\n      i0.ɵɵelementEnd()()()()()();\n      i0.ɵɵelementStart(10, \"div\", 1)(11, \"div\", 6)(12, \"h4\");\n      i0.ɵɵtext(13);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\", 7)(15, \"table\", 8)(16, \"thead\")(17, \"tr\")(18, \"th\", 9);\n      i0.ɵɵtext(19, \"Full Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"th\", 9);\n      i0.ɵɵtext(21, \"Action\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(22, \"tbody\");\n      i0.ɵɵtemplate(23, StudentDashboardComponent_tr_23_Template, 6, 1, \"tr\", 10);\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵtemplate(24, StudentDashboardComponent_table_24_Template, 28, 4, \"table\", 11);\n      i0.ɵɵtemplate(25, StudentDashboardComponent_div_25_Template, 43, 12, \"div\", 12);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵtextInterpolate1(\" \", ctx.email, \"\");\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.studentData);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.selectedStudent);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDailyDiarySection);\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i6.NavMenuComponent, i5.TitleCasePipe],\n  styles: [\".border-left[_ngcontent-%COMP%] {\\r\\n    border-right: 1px double #dee2e6;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvVlRfU2VjdGlvbi9zdHVkZW50LWRhc2hib2FyZC9zdHVkZW50LWRhc2hib2FyZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZ0NBQWdDO0VBQ2xDIiwic291cmNlc0NvbnRlbnQiOlsiLmJvcmRlci1sZWZ0IHtcclxuICAgIGJvcmRlci1yaWdodDogMXB4IGRvdWJsZSAjZGVlMmU2O1xyXG4gIH0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","StudentDashboardComponent","constructor","apiservice","router","authservice","imageCompressService","ngOnInit","getAllStudents","email","getEmail","getStudents","subscribe","res","studentData","studentDetails","console","log","selectStudent","id","selectedStudent","stud_Id","studentDataFromJson","showDailyDiarySection","getStudentById","next","error","clearSelectedStudent","go_to_login","navigate","onFileSelected","event","files","target","selectedImage","length","originalSizeInBytes","size","originalSizeInKB","toFixed","compressAndUpload","reader","FileReader","onload","base64String","result","compressFile","then","compressedBase64","compressedSizeInBytes","compressedSizeInKB","onUploadAndProcessData","catch","readAsDataURL","uploadCompressedImg","split","response","jsonstudentID","Number","fieldInfo","StudentID","isNaN","alert","jsonData","sortedData","tasks","key","startsWith","taskName","push","taskData","year","month","forEach","task","substring","taskTicks","i","tickKey","monthDayKey","hourKey","minuteKey","performedValue","taskObj","TaskName","TaskTicks","JSONDATA","monthDayValue","hourValue","minuteValue","minutesPresent","date","Performed","Date","hour","Minutes","Stud_Id","existingTask","find","item","sort","a","b","taskNameComparison","localeCompare","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\project angular\\Student_Task_Tracker\\ClientApp\\src\\app\\VT_Section\\student-dashboard\\student-dashboard.component.html","D:\\project angular\\Student_Task_Tracker\\ClientApp\\src\\app\\VT_Section\\student-dashboard\\student-dashboard.component.ts"],"sourcesContent":["<div class=\"container\">\n  <!--1st row-->\n  <div class=\"row\">\n    <div class=\"col-6\"><app-nav-menu></app-nav-menu></div>\n    <div class=\"col-6\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <div class=\"d-flex justify-content-end mt-3\">\n            <button (click)=\"go_to_login()\" class=\"btn btn-success\">Login</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <!--2nd row-->\n  <div class=\"row\">\n    <div class=\"col-4 text-left\">\n      <h4> {{email}}</h4>\n    </div>\n    <div class=\"col-8 text-right\">\n      <table class=\"table mt-3\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Full Name</th>\n            <th scope=\"col\">Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let data of studentData\">\n            <td>{{data.fullname}}</td>\n            <td><button class=\"btn btn-info\" (click)=\"selectStudent(data.stud_Id)\">Select Student</button></td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n\n<!------show data of selected student (id) in table--------->\n<table class=\"table mt-3\" *ngIf=\"selectedStudent\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Full Name</th>\n      <th scope=\"col\">Email</th>\n      <th scope=\"col\">Mobile</th>\n      <th scope=\"col\">Academic Year</th>\n      <th>Actions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>{{ selectedStudent.fullname }}</td>\n      <td>{{ selectedStudent.email }}</td>\n      <td>{{ selectedStudent.mobile }}</td>\n      <td>{{ selectedStudent.academicyear }}</td>\n      <!-- <td>\n        <input type=\"file\" #fileInput (change)=\"onFileSelected($event)\" style=\"display: none;\">\n        <button (click)=\"fileInput.click()\">Fill Daily Diary</button>\n      </td> -->\n      <!-- app.component.html -->\n      <div>\n        <input type=\"file\" (change)=\"onFileSelected($event)\" style=\"display: none;\" #fileInput>\n        <button (click)=\"fileInput.click()\">Select and Upload Image</button>\n      </div>\n    </tr>\n  </tbody>\n</table>\n\n<!--json data from daily diary scanned form-->\n<div class=\"container border border-warning\" *ngIf=\"showDailyDiarySection\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <h4 class=\"text-center\">{{studentDataFromJson.targetName}}</h4>\n      \n    </div>\n  </div>\n  <!-- <div class=\"row border-bottom\">\n    <h6>Name: {{studentDataFromJson.fieldInfo.Name | titlecase}}</h6>\n  </div> -->\n  <div class=\"row\">\n    <div class=\"col-2\"><h6>Name: {{studentDataFromJson.fieldInfo.Name | titlecase}}</h6></div>\n    <div class=\"col-1\">Student ID :</div>\n    <div class=\"col-1 border mt-1\" style=\"text-align: left;\">{{studentDataFromJson.fieldInfo.StudentID}}</div>\n    <div class=\"col-1\">Month :</div>\n    <div class=\"col-1 border mt-1\">{{studentDataFromJson.fieldInfo.Month}}</div>\n    <div class=\"col-1\">Year :</div>\n    <div class=\"col-1 border\">{{studentDataFromJson.fieldInfo.Year}}</div>\n    <!-- <div class=\"col-2\">Academic Year :</div>\n    <div class=\"col-2 border mt-1\">{{studentDataFromJson.fieldInfo.AcademicYear}}</div> -->\n  </div>\n  <!-- <div class=\"row\">\n    <div class=\"col-1\">Month :</div>\n    <div class=\"col-2 border mt-1\">{{studentDataFromJson.fieldInfo.Month}}</div>\n    <div class=\"col-1\">Year :</div>\n    <div class=\"col-2 border\">{{studentDataFromJson.fieldInfo.Year}}</div>\n    <div class=\"col-1\">Job Role :</div>\n    <div class=\"col-4 border mt-1\">{{studentDataFromJson.fieldInfo.JobRole}}</div>\n  </div> -->\n<br>\n  <table class=\"table table-bordered\">\n    <tr>\n      <td class=\"border-left\" rowspan=\"3\">Task</td>\n      <td class=\"border-left\">Day Of Month</td>\n      <td class=\"border-left\" *ngFor=\"let MonthDay of  MonthDaysData\">{{ studentDataFromJson?.fieldInfo[MonthDay]}}</td>\n    </tr>\n    <tr>\n      <td class=\"border-left\">Hours</td>\n      <td class=\"border-left\" *ngFor=\"let Hour of HoursData\">{{ studentDataFromJson?.fieldInfo[Hour]}}</td>\n    </tr>\n    <tr>\n      <td class=\"border-left\">Minutes</td>\n      <td class=\"border-left\" *ngFor=\"let Minute of MinutesData\">{{ studentDataFromJson?.fieldInfo[Minute]}}</td>\n    </tr>\n    <ng-container *ngFor=\"let task of taskData\">\n      <tr>\n        <td class=\"border-left\" colspan=\"2\">{{ task.TaskName }}</td>\n        <td class=\"border-left\" *ngFor=\"let tick of task.TaskTicks\">{{ tick }}</td>\n      </tr>\n    </ng-container>\n  </table>\n  <div class=\"row\">\n    <div class=\"col\"> <h6>{{ studentDataFromJson?.fieldInfo.OverallInternshipExperience}}</h6></div>\n  </div>\n\n</div>\n\n  ","\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ApiService } from 'src/app/shared/api.service';\nimport { AuthserviceService } from 'src/app/shared/authservice.service';\nimport { NgxImageCompressService } from 'ngx-image-compress';\n\n@Component({\n  selector: 'app-student-dashboard',\n  templateUrl: './student-dashboard.component.html',\n  styleUrls: ['./student-dashboard.component.css']\n})\nexport class StudentDashboardComponent {\n  // Define sortedData as a property\n // sortedData1: TaskData[] = [];\n\n  studentData !: any;\n  selectedStudent: any;\n  studentDataFromJson: any;\n  email!: string; //display emailid of vt to student dashboard\n\n  showDailyDiarySection: boolean = false;\n  MonthDaysData: string[] = ['MonthDay1', 'MonthDay2', 'MonthDay3', 'MonthDay4', 'MonthDay5', 'MonthDay6', 'MonthDay7', 'MonthDay8', 'MonthDay9'];\n  HoursData: string[] = ['Hour1', 'Hour2', 'Hour3', 'Hour4', 'Hour5', 'Hour6', 'Hour7', 'Hour8', 'Hour9'];\n  MinutesData: string[] = ['Minutes1', 'Minutes2', 'Minutes3', 'Minutes4', 'Minutes5', 'Minutes6', 'Minutes7', 'Minutes8', 'Minutes9'];\n  // Task1TickData: string[] = ['Task1Tick1','Task1Tick2','Task1Tick3','Task1Tick4','Task1Tick5','Task1Tick6','Task1Tick7','Task1Tick8','Task1Tick9','Task1Tick10','Task1Tick11','Task1Tick12','Task1Tick13']\n  taskData: any[] | undefined;\n\n  selectedImage: File | null = null;\n  compressedBase64: string | null = null;\n  stud_Id: any;\n\n\n  constructor(private apiservice: ApiService,\n    private router: Router,\n    private authservice: AuthserviceService,\n    private imageCompressService: NgxImageCompressService\n\n  ) { }\n\n  ngOnInit(): void {\n    this.getAllStudents();\n    this.email = this.authservice.getEmail();//display emailid of vt to student dashboard\n  }\n\n  getAllStudents() {\n    this.apiservice.getStudents().subscribe((res: any) => {\n\n      this.studentData = res.studentDetails;\n      console.log(res.studentDetails);\n    })\n  }\n  selectStudent(id: number): void {\n    // Reset previous data\n    this.selectedStudent = null;\n    this.stud_Id = null;\n    this.studentDataFromJson = null;\n    this.showDailyDiarySection = false;\n\n    this.apiservice.getStudentById(id).subscribe({\n      next: (res) => {\n        this.selectedStudent = res.studentDetails;\n        this.stud_Id = id;  // Set stud_Id here\n        console.log(this.selectedStudent);\n        console.log(\"stu_id\", this.stud_Id);\n      },\n      error: (error) => {\n        console.error('Error in selectStudent:', error);\n      }\n    });\n  }\n\n  clearSelectedStudent() {\n    this.selectedStudent = null;\n  }\n  go_to_login() {\n    this.router.navigate(['/vt_login'])\n  }\n\n  //select image\n  onFileSelected(event: any): void {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n      this.compressAndUpload(); //call function to compress and upload image on http post\n    }\n  }\n\n  //function to compress image and upload it\n  compressAndUpload(): void {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result as string;\n        this.imageCompressService\n          .compressFile(base64String, -1, 60, 60)\n          .then((compressedBase64: string) => {\n            const compressedSizeInBytes = compressedBase64.length;\n            const compressedSizeInKB = compressedSizeInBytes / 1024;\n            console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n            this.compressedBase64 = compressedBase64;\n            // Call your API service here to send the compressed image\n            this.onUploadAndProcessData();\n          })\n          .catch((error) => {\n            console.error('Image Compression Error:', error);\n          });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n\n  //send upload file to http post and get json data and show in table\n  onUploadAndProcessData(): void {\n    if (this.compressedBase64) {\n      console.log('Sending Compressed Image Size:', this.compressedBase64.length / 1024, 'KB');\n      // Call your API service to upload the compressed image\n      this.apiservice.uploadCompressedImg(this.compressedBase64.split(',')[1]).subscribe({\n        next: (response) => {\n          console.log('API Response:', response);\n\n          //getting Student_Id from json api rsponse\n          const jsonstudentID = Number(response.fieldInfo.StudentID);\n\n          console.log('jsonstudentID:', jsonstudentID);\n\n          if (!isNaN(jsonstudentID) && jsonstudentID === this.stud_Id) {\n            console.log(\"id matching\");\n            alert(\"Record Found !!Fetching Details\");\n            this.studentDataFromJson = response;\n            this.jsonData();\n            this.sortedData();\n            //this.populateSortedData();\n            this.showDailyDiarySection = true;\n          } else {\n            console.log(\"Id not matching\");\n            alert(\"Student Id Is not Matching.Sorry!!\")\n          }\n\n        },\n        error: (error) => {\n          console.error('API Error:', error);\n        },\n      });\n    }\n  }\n  //function getting json \n  private jsonData(): void {\n    if (this.studentDataFromJson) {\n      console.log(\"jsonData=\",this.studentDataFromJson);\n\n   //  const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6','Task7'];\n   const tasks :string[] = [];\n\n   // Extract task names dynamically from the response object\n   for(const key in this.studentDataFromJson.fieldInfo) {\n    if(key.startsWith('TaskName')) {\n      const taskName = this.studentDataFromJson.fieldInfo[key];\n      if(taskName) {\n        tasks.push(taskName);\n      }\n      console.log(\"tasks =\",tasks)\n    }\n   }\n      const taskData: any[] = [];\n     // const sortedData: TaskData[] = [];\n\n      // Extract the 'Year' and 'Month' from the scanned file\n      const year = this.studentDataFromJson.fieldInfo['Year'];\n      const month = this.studentDataFromJson.fieldInfo['Month'];\n\n      tasks.forEach((task) => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n        // console.log(\"TaskName=\", taskName);\n\n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n\n        const taskTicks: number[] = [];\n\n        for (let i = 1; i <= 9; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const monthDayKey = `MonthDay${i}`;\n          const hourKey = `Hour${i}`;\n          const minuteKey = `Minutes${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 1 : 0;\n          //console.log(\"Tick\", performedValue);\n\n          taskTicks.push(performedValue);\n        }\n\n        const taskObj = {\n          TaskName: taskName,\n          TaskTicks: taskTicks,\n        };\n\n        taskData.push(taskObj);\n      });\n      // use taskData to display in the template\n      this.taskData = taskData;\n    }\n  }\n  //here sotrted data from json file to send to backend\n  //sorted data as as method/function\n  // private sortedData():  void {\n  //   if (this.studentDataFromJson) {\n  //     const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6','Task7'];\n  //     const sortedData: TaskData[] = []; \n\n  //     // Extract the 'Year' and 'Month' from the scanned file\n  //     const year = this.studentDataFromJson.fieldInfo['Year'];\n  //     const month = this.studentDataFromJson.fieldInfo['Month'];\n\n  //     tasks.forEach((task) => {\n  //       const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n  //       // console.log(\"TaskName=\",taskName);\n\n  //       // Skip if TaskName is empty\n  //       if (!taskName) {\n  //         return;\n  //       }\n\n  //       const taskTicks: number[] = [];\n\n  //       for (let i = 1; i <= 9; i++) {\n  //         const tickKey = `${task}Tick${i}`;\n  //         const monthDayKey = `MonthDay${i}`;\n  //         const hourKey = `Hour${i}`;\n  //         const minuteKey = `Minutes${i}`;\n  //         const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n  //         //  console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n\n  //         // taskTicks.push(performedValue);\n  //         // Only include tasks with tick value 1\n  //         if (performedValue === 'Yes') {\n  //           const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n  //           const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n  //           const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n\n  //           const minutesPresent = minuteValue !== ''; // Check if minutes are present\n\n  //           // Form the date string directly\n  //           const date = `${year}-${month}-${monthDayValue}`;\n\n  //           const taskObj = {\n  //             TaskName: taskName,\n  //             Performed: performedValue,\n  //             Date: date,\n  //             hour: hourValue,\n  //             Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n  //             Stud_Id :this.stud_Id\n  //           };\n\n  //           // Check if the task is already in the sortedData array\n  //           const existingTask = sortedData.find((item) => item.TaskName === taskName && item.Date === date);\n\n  //           if (!existingTask) {\n  //             sortedData.push(taskObj);\n  //           }\n  //         }\n  //       }\n  //     });\n\n  //     // Sort the array based on TaskName, Date\n  //     sortedData.sort((a, b) => {\n  //       const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n  //       return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n  //     });\n\n  //     console.log(\"sortedData =\", sortedData);\n\n  //     //this.addingDailyDiaryRecord(sortedData);\n  //   }\n  // }\n\n  private sortedData():  void {\n    const JSONDATA = this.jsonData();\n    console.log(\"JSONDATA=\",JSONDATA);\n\n    if (this.JSONDATA) {\n      const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6','Task7'];\n      const sortedData: TaskData[] = []; \n\n      // Extract the 'Year' and 'Month' from the scanned file\n      const year = this.studentDataFromJson.fieldInfo['Year'];\n      const month = this.studentDataFromJson.fieldInfo['Month'];\n\n      tasks.forEach((task) => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n        // console.log(\"TaskName=\",taskName);\n\n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n\n        const taskTicks: number[] = [];\n\n        for (let i = 1; i <= 9; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const monthDayKey = `MonthDay${i}`;\n          const hourKey = `Hour${i}`;\n          const minuteKey = `Minutes${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n          //  console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n\n          // taskTicks.push(performedValue);\n          // Only include tasks with tick value 1\n          if (performedValue === 'Yes') {\n            const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n            const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n            const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n\n            const minutesPresent = minuteValue !== ''; // Check if minutes are present\n\n            // Form the date string directly\n            const date = `${year}-${month}-${monthDayValue}`;\n\n            const taskObj = {\n              TaskName: taskName,\n              Performed: performedValue,\n              Date: date,\n              hour: hourValue,\n              Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n              Stud_Id :this.stud_Id\n            };\n\n            // Check if the task is already in the sortedData array\n            const existingTask = sortedData.find((item) => item.TaskName === taskName && item.Date === date);\n\n            if (!existingTask) {\n              sortedData.push(taskObj);\n            }\n          }\n        }\n      });\n\n      // Sort the array based on TaskName, Date\n      sortedData.sort((a, b) => {\n        const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n        return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n      });\n\n      console.log(\"sortedData =\", sortedData);\n\n      //this.addingDailyDiaryRecord(sortedData);\n    }\n  }\n  // Define sortedData as a method to populate the array\n  // populateSortedData(): void {\n  //   if (this.studentDataFromJson) {\n  //     const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n  //     // Clear sortedData before populating\n  //     this.sortedData1 = [];\n\n  //     // Extract the 'Year' and 'Month' from the scanned file\n  //     const year = this.studentDataFromJson.fieldInfo['Year'];\n  //     const month = this.studentDataFromJson.fieldInfo['Month'];\n\n  //     tasks.forEach((task) => {\n  //       const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n\n  //       // Skip if TaskName is empty\n  //       if (!taskName) {\n  //         return;\n  //       }\n\n  //       for (let i = 1; i <= 9; i++) {\n  //         const tickKey = `${task}Tick${i}`;\n  //         const monthDayKey = `MonthDay${i}`;\n  //         const hourKey = `Hour${i}`;\n  //         const minuteKey = `Minutes${i}`;\n  //         const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n\n  //         // Only include tasks with tick value 1\n  //         if (performedValue === 'Yes') {\n  //           const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n  //           const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n  //           const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n\n  //           const minutesPresent = minuteValue !== ''; // Check if minutes are present\n\n  //           // Form the date string directly\n  //           const date = `${year}-${month}-${monthDayValue}`;\n\n  //           const taskObj: TaskData = {\n  //             TaskName: taskName,\n  //             Performed: performedValue,\n  //             Date: date,\n  //             hour: hourValue,\n  //             Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n  //             Stud_Id: this.stud_Id\n  //           };\n\n  //           // Check if the task is already in the sortedData array\n  //           const existingTask = this.sortedData1.find((item) => item.TaskName === taskName && item.Date === date);\n\n  //           if (!existingTask) {\n  //             this.sortedData1.push(taskObj);\n  //           }\n  //         }\n  //       }\n  //     });\n\n  //     // Sort the array based on TaskName, Date\n  //     this.sortedData1.sort((a, b) => {\n  //       const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n  //       return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n  //     });\n\n  //     console.log(\"sortedData1 =\", this.sortedData1);\n  //     this.addingSingleDDRecord();\n  //   }\n\n  // }\n\n  //method to get single record\n  // getSingleRecord(): TaskData | undefined {\n  //   return this.sortedData1.length > 0 ? this.sortedData1[0] : undefined;\n  // }\n\n  // addingDailyDiaryRecord(sortedData:any[]) : void {\n  //   // const recordToSend = sortedData.map(record =>  ({ ...record, Stud_Id: record.stud_Id}));\n  //   console.log(\"stud id =\",this.stud_Id);\n  //   console.log(\"recordto send=\",sortedData);\n  //   this.apiservice.addDailyDiaryRecord(sortedData).subscribe({\n  //     next : res =>{\n  //       console.log(\"ddRecord=\",res)\n  //     },\n  //     error: err => {\n  //       console.error(\"Error:\", err);\n  //       if (err instanceof HttpErrorResponse) {\n  //         console.error(\"Error Status:\", err.status);\n  //         console.error(\"Error Response:\", err.error);\n  //         if (err.error && err.error.errors) {\n  //           console.error(\"Validation Errors:\", err.error.errors);\n  //         }\n  //     }\n  //   }\n  //   })\n  // }\n\n\n  //api call to service for single record\n  // addingSingleDDRecord(): void {\n  //     const singleRecord = this.getSingleRecord();\n  //     if (singleRecord) {\n  //       console.log(\"sendingSingleR_toAPI=\", singleRecord);\n  //       this.apiservice.addSingleDDRecord(singleRecord).subscribe({\n  //         next: (res) => {\n  //           console.log('Record sent successfully:', res);\n  //           this.recordSent = true; // Mark the record as sent\n  //         },\n  //         error: (error) => {\n  //           console.error('Error sending record:', error);\n  //           // Handle error response if needed\n  //         }\n  //       });\n  //     } else {\n  //       console.error('No single record found to send.');\n  //     }\n    \n  // } \n}\n\ninterface TaskData {\n  Stud_Id: number;\n  TaskName: string;\n  Performed: string;//Performed means TaskTick\n  Date: string;\n  hour: string;\n  Minutes?: string;\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}