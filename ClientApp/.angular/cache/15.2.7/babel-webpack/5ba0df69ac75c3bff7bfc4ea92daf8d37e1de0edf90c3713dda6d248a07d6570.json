{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet StudentDashboardComponent = class StudentDashboardComponent {\n  constructor(apiservice, router, authservice) {\n    this.apiservice = apiservice;\n    this.router = router;\n    this.authservice = authservice;\n    this.showDailyDiarySection = false;\n    this.MonthDaysData = ['MonthDay1', 'MonthDay2', 'MonthDay3', 'MonthDay4', 'MonthDay5', 'MonthDay6', 'MonthDay7', 'MonthDay8', 'MonthDay9', 'MonthDay10', 'MonthDay11', 'MonthDay12', 'MonthDay13'];\n    this.hoursData = ['hour1', 'hour2', 'hour3', 'hour4', 'hour5', 'hour6', 'hour7', 'hour8', 'hour9', 'hour10', 'hour11', 'hour12', 'hour13'];\n    this.minutesData = ['minutes1', 'minutes2', 'minutes3', 'minutes4', 'minutes5', 'minutes6', 'minutes7', 'minutes8', 'minutes9', 'minutes10', 'minutes11', 'minutes12', 'minutes13'];\n    this.Task1TickData = ['Task1Tick1', 'Task1Tick2', 'Task1Tick3', 'Task1Tick4', 'Task1Tick5', 'Task1Tick6', 'Task1Tick7', 'Task1Tick8', 'Task1Tick9', 'Task1Tick10', 'Task1Tick11', 'Task1Tick12', 'Task1Tick13'];\n  }\n  ngOnInit() {\n    this.getAllStudents();\n    this.email = this.authservice.getEmail(); //display emailid of vt to student dashboard\n  }\n\n  getAllStudents() {\n    this.apiservice.getStudents().subscribe(res => {\n      this.studentData = res.studentDetails;\n      console.log(res.studentDetails);\n    });\n  }\n  selectStudent(id) {\n    this.apiservice.getStudentById(id).subscribe(res => {\n      this.selectedStudent = res.studentDetails;\n      //console.log(res.studentDetails);\n      console.log(this.selectedStudent);\n    });\n  }\n  clearSelectedStudent() {\n    this.selectedStudent = null;\n  }\n  go_to_login() {\n    this.router.navigate(['/vt_login']);\n  }\n  //select json file and upload\n  onFileSelected(event) {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        //It checks if e and e.target are not null or undefined before attempting to access e.target. \n        //The result is cast to FileReader type, and then .result is accessed and cast as a string.\n        const fileContent = e.target?.result;\n        this.parseJson(fileContent);\n        this.logFilteredData(); // Log the filtered data before sending to the backend\n        // this.uploadDataToBackend();\n        this.showDailyDiarySection = true;\n      };\n      reader.readAsText(file);\n    }\n  }\n  parseJson(jsonString) {\n    try {\n      const jsonData = JSON.parse(jsonString);\n      this.studentDataFromJson = jsonData;\n      console.log(\"stu_data from json\", this.studentDataFromJson);\n      // this.hoursData = Object.values(this.studentDataFromJson.fieldInfo.hour);\n    } catch (error) {\n      console.log(\"Error parsing JSON:\", error);\n    }\n  }\n  //here new obj for filtered data from scanned file to send to backend\n  // private logFilteredData(): void {\n  //   if (this.studentDataFromJson) {\n  //     const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n  //     const sortedData: TaskData[] = [];\n  //     // Extract the 'Year' and 'Month' from the scanned file\n  //     const year = this.studentDataFromJson.fieldInfo['Year'];\n  //     const month = this.studentDataFromJson.fieldInfo['Month'];\n  //     tasks.forEach((task) => {\n  //       const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n  //       console.log(\"TaskName=\",taskName);\n  //       // Skip if TaskName is empty\n  //       if (!taskName) {\n  //         return;\n  //       }\n  //       for (let i = 1; i <= 13; i++) {\n  //         const tickKey = `${task}Tick${i}`;\n  //         const monthDayKey = `MonthDay${i}`;\n  //         const hourKey = `hour${i}`;\n  //         const minuteKey = `minutes${i}`;\n  //         const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n  //         console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n  //         // Only include tasks with tick value 1\n  //         if (performedValue === 'Yes') {\n  //           const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n  //           const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n  //           const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n  //           const minutesPresent = minuteValue !== ''; // Check if minutes are present\n  //           // Form the date string directly\n  //           const date = `${year}-${month}-${monthDayValue}`;\n  //           const taskObj = {\n  //             TaskName: taskName,\n  //             Performed: performedValue,\n  //             Date: date,\n  //             Hour: hourValue,\n  //             Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n  //           };\n  //           // Check if the task is already in the sortedData array\n  //           const existingTask = sortedData.find((item) => item.TaskName === taskName && item.Date === date);\n  //           if (!existingTask) {\n  //             sortedData.push(taskObj);\n  //           }\n  //         }\n  //       }\n  //     });\n  //     // Sort the array based on TaskName, Date\n  //     sortedData.sort((a, b) => {\n  //       const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n  //       return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n  //     });\n  //     console.log(\"sortedData =\", sortedData);\n  //   }\n  // }\n  logFilteredData() {\n    if (this.studentDataFromJson) {\n      const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n      const taskData = [];\n      tasks.forEach(task => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n        console.log(\"TaskName=\", taskName);\n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n        const taskTicks = [];\n        for (let i = 1; i <= 13; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 1 : 0;\n          console.log(\"Tick\", performedValue);\n          taskTicks.push(performedValue);\n        }\n        const taskObj = {\n          TaskName: taskName,\n          TaskTicks: taskTicks\n        };\n        taskData.push(taskObj);\n      });\n      console.log(\"taskData =\", taskData);\n      // Now you can use taskData to display in the template\n      this.taskData = taskData; // Assuming you have a property taskData in your component\n    }\n  }\n\n  getTaskTickKeys(taskIndex) {\n    const taskKey = `Task${taskIndex + 1}Tick`;\n    return this.Task1TickData.map(tick => `${taskKey}${tick.substring(6)}`);\n  }\n};\nStudentDashboardComponent = __decorate([Component({\n  selector: 'app-student-dashboard',\n  templateUrl: './student-dashboard.component.html',\n  styleUrls: ['./student-dashboard.component.css']\n})], StudentDashboardComponent);\nexport { StudentDashboardComponent };","map":{"version":3,"mappings":"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","names":["Component","StudentDashboardComponent","constructor","apiservice","router","authservice","ngOnInit","getAllStudents","email","getEmail","getStudents","subscribe","res","studentData","studentDetails","console","log","selectStudent","id","getStudentById","selectedStudent","clearSelectedStudent","go_to_login","navigate","onFileSelected","event","file","target","files","reader","FileReader","onload","e","fileContent","result","parseJson","logFilteredData","showDailyDiarySection","readAsText","jsonString","jsonData","JSON","parse","studentDataFromJson","error","tasks","taskData","forEach","task","taskName","fieldInfo","substring","taskTicks","i","tickKey","performedValue","push","taskObj","TaskName","TaskTicks","getTaskTickKeys","taskIndex","taskKey","Task1TickData","map","tick","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\project angular\\Student_Task_Tracker\\ClientApp\\src\\app\\VT_Section\\student-dashboard\\student-dashboard.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ApiService } from 'src/app/shared/api.service';\nimport { AuthserviceService } from 'src/app/shared/authservice.service';\n\n@Component({\n  selector: 'app-student-dashboard',\n  templateUrl: './student-dashboard.component.html',\n  styleUrls: ['./student-dashboard.component.css']\n})\nexport class StudentDashboardComponent {\n  studentData !: any;\n  selectedStudent: any;\n  studentDataFromJson: any;\n  email!: string; //display emailid of vt to student dashboard\n\n  showDailyDiarySection: boolean = false;\n  MonthDaysData: string[]=['MonthDay1','MonthDay2','MonthDay3','MonthDay4','MonthDay5','MonthDay6','MonthDay7','MonthDay8','MonthDay9','MonthDay10','MonthDay11','MonthDay12','MonthDay13'];\n  hoursData: string[] = ['hour1', 'hour2', 'hour3', 'hour4', 'hour5', 'hour6', 'hour7', 'hour8', 'hour9', 'hour10', 'hour11', 'hour12', 'hour13'];\n  minutesData: string[] = ['minutes1','minutes2','minutes3','minutes4','minutes5','minutes6','minutes7','minutes8','minutes9','minutes10','minutes11','minutes12','minutes13'];\n  Task1TickData: string[] = ['Task1Tick1','Task1Tick2','Task1Tick3','Task1Tick4','Task1Tick5','Task1Tick6','Task1Tick7','Task1Tick8','Task1Tick9','Task1Tick10','Task1Tick11','Task1Tick12','Task1Tick13']\n  taskData: any[] | undefined;\n\n\n  constructor(private apiservice: ApiService,\n    private router: Router,\n    private authservice : AuthserviceService) { }\n\n  ngOnInit(): void {\n    this.getAllStudents();\n    this.email = this.authservice.getEmail();//display emailid of vt to student dashboard\n  }\n\n  getAllStudents() {\n    this.apiservice.getStudents().subscribe((res: any) => {\n\n      this.studentData = res.studentDetails;\n      console.log(res.studentDetails);\n    })\n  }\n  selectStudent(id: number) {\n    this.apiservice.getStudentById(id).subscribe((res) => {\n      this.selectedStudent = res.studentDetails;\n      //console.log(res.studentDetails);\n      console.log(this.selectedStudent);\n    })\n  }\n  clearSelectedStudent() {\n    this.selectedStudent = null;\n  }\n  go_to_login() {\n    this.router.navigate(['/vt_login'])\n  }\n\n  //select json file and upload\n  onFileSelected(event: any): void {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        //It checks if e and e.target are not null or undefined before attempting to access e.target. \n        //The result is cast to FileReader type, and then .result is accessed and cast as a string.\n        const fileContent = (e.target as FileReader)?.result as string;\n        this.parseJson(fileContent);\n         this.logFilteredData(); // Log the filtered data before sending to the backend\n        // this.uploadDataToBackend();\n        this.showDailyDiarySection = true; \n      };\n      reader.readAsText(file);\n    }\n  }\n  private parseJson(jsonString: string): void {\n    try {\n      const jsonData = JSON.parse(jsonString);\n      this.studentDataFromJson = jsonData;\n      console.log(\"stu_data from json\", this.studentDataFromJson);\n      // this.hoursData = Object.values(this.studentDataFromJson.fieldInfo.hour);\n    } catch (error) {\n      console.log(\"Error parsing JSON:\", error);\n    }\n  }\n\n  //here new obj for filtered data from scanned file to send to backend\n  // private logFilteredData(): void {\n  //   if (this.studentDataFromJson) {\n  //     const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n  //     const sortedData: TaskData[] = [];\n  \n  //     // Extract the 'Year' and 'Month' from the scanned file\n  //     const year = this.studentDataFromJson.fieldInfo['Year'];\n  //     const month = this.studentDataFromJson.fieldInfo['Month'];\n  \n  //     tasks.forEach((task) => {\n  //       const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n  //       console.log(\"TaskName=\",taskName);\n  \n  //       // Skip if TaskName is empty\n  //       if (!taskName) {\n  //         return;\n  //       }\n  \n  //       for (let i = 1; i <= 13; i++) {\n  //         const tickKey = `${task}Tick${i}`;\n  //         const monthDayKey = `MonthDay${i}`;\n  //         const hourKey = `hour${i}`;\n  //         const minuteKey = `minutes${i}`;\n  \n  //         const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 'Yes' : 'No';\n  //         console.log(\"Tick\",this.studentDataFromJson.fieldInfo[tickKey]);\n  \n  //         // Only include tasks with tick value 1\n  //         if (performedValue === 'Yes') {\n  //           const monthDayValue = this.studentDataFromJson.fieldInfo[monthDayKey];\n  //           const hourValue = this.studentDataFromJson.fieldInfo[hourKey];\n  //           const minuteValue = this.studentDataFromJson.fieldInfo[minuteKey];\n  \n  //           const minutesPresent = minuteValue !== ''; // Check if minutes are present\n  \n  //           // Form the date string directly\n  //           const date = `${year}-${month}-${monthDayValue}`;\n  \n  //           const taskObj = {\n  //             TaskName: taskName,\n  //             Performed: performedValue,\n  //             Date: date,\n  //             Hour: hourValue,\n  //             Minutes: minutesPresent ? minuteValue : '00', // Include only if minutes are present\n  //           };\n  \n  //           // Check if the task is already in the sortedData array\n  //           const existingTask = sortedData.find((item) => item.TaskName === taskName && item.Date === date);\n  \n  //           if (!existingTask) {\n  //             sortedData.push(taskObj);\n  //           }\n  //         }\n  //       }\n  //     });\n  \n  //     // Sort the array based on TaskName, Date\n  //     sortedData.sort((a, b) => {\n  //       const taskNameComparison = a.TaskName.localeCompare(b.TaskName);\n  //       return taskNameComparison === 0 ? a.Date.localeCompare(b.Date) : taskNameComparison;\n  //     });\n  \n  //     console.log(\"sortedData =\", sortedData);\n  //   }\n  // }\n\n  private logFilteredData(): void {\n    if (this.studentDataFromJson) {\n      const tasks = ['Task1', 'Task2', 'Task3', 'Task4', 'Task5', 'Task6'];\n      const taskData: any[] = [];\n  \n      tasks.forEach((task) => {\n        const taskName = this.studentDataFromJson.fieldInfo[`TaskName${task.substring(4)}`];\n        console.log(\"TaskName=\", taskName);\n  \n        // Skip if TaskName is empty\n        if (!taskName) {\n          return;\n        }\n  \n        const taskTicks: number[] = [];\n  \n        for (let i = 1; i <= 13; i++) {\n          const tickKey = `${task}Tick${i}`;\n          const performedValue = this.studentDataFromJson.fieldInfo[tickKey] === '1' ? 1 : 0;\n          console.log(\"Tick\", performedValue);\n  \n          taskTicks.push(performedValue);\n        }\n  \n        const taskObj = {\n          TaskName: taskName,\n          TaskTicks: taskTicks,\n        };\n  \n        taskData.push(taskObj);\n      });\n  \n      console.log(\"taskData =\", taskData);\n  \n      // Now you can use taskData to display in the template\n      this.taskData = taskData; // Assuming you have a property taskData in your component\n    }\n  }\n  \n  getTaskTickKeys(taskIndex: number): string[] {\n    const taskKey = `Task${taskIndex + 1}Tick`;\n    return this.Task1TickData.map(tick => `${taskKey}${tick.substring(6)}`);\n  }\n}\n\ninterface TaskData {\n  TaskName: string;\n  Performed: string;//Performed means TaskTick\n Date: string;\n  Hour: string;\n  Minutes?: string;\n  // ... other properties\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}